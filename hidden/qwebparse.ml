type token =
  | SEMI
  | LPAREN
  | RPAREN
  | LBRACE
  | RBRACE
  | COMMA
  | FUNCTION
  | PLUS
  | MINUS
  | TIMES
  | DIVIDE
  | ASSIGN
  | NOT
  | EQ
  | NEQ
  | LT
  | LEQ
  | GT
  | GEQ
  | AND
  | OR
  | IN
  | DISPLAY
  | OUTPUT
  | IF
  | ENDIF
  | OTHERWISE
  | ENDOTHERWISE
  | OTHERWISEIF
  | ENDOTHERWISEIF
  | FOR
  | ENDFOR
  | REPEAT
  | ENDREPEAT
  | SET
  | CONTINUE
  | PASS
  | TO
  | WHILE
  | INT
  | BOOL
  | STR
  | FLOAT
  | CHAR
  | VOID
  | RECT
  | CIRC
  | TRI
  | SQRE
  | ELPS
  | POLY
  | POINT
  | LINE
  | DATE
  | COLOR
  | LBRACKET
  | RBRACKET
  | COLON
  | DOT
  | END
  | LENGTH
  | APPEND
  | REMOVE
  | CREATEHEADER
  | CREATEPARAGRAPH
  | CREATETABLE
  | CREATEUNORDEREDLIST
  | OBJECT
  | ID of (string)
  | EOF
  | LITERAL of (int)
  | INT_LITERAL of (float)
  | STRING_LITERAL of (string)
  | BOOL_LITERAL of (bool)
  | FLOAT_LITERAL of (float)

open Parsing;;
let _ = parse_error;;
# 4 "qwebparse.mly"
open Ast
# 83 "qwebparse.ml"
let yytransl_const = [|
  257 (* SEMI *);
  258 (* LPAREN *);
  259 (* RPAREN *);
  260 (* LBRACE *);
  261 (* RBRACE *);
  262 (* COMMA *);
  263 (* FUNCTION *);
  264 (* PLUS *);
  265 (* MINUS *);
  266 (* TIMES *);
  267 (* DIVIDE *);
  268 (* ASSIGN *);
  269 (* NOT *);
  270 (* EQ *);
  271 (* NEQ *);
  272 (* LT *);
  273 (* LEQ *);
  274 (* GT *);
  275 (* GEQ *);
  276 (* AND *);
  277 (* OR *);
  278 (* IN *);
  279 (* DISPLAY *);
  280 (* OUTPUT *);
  281 (* IF *);
  282 (* ENDIF *);
  283 (* OTHERWISE *);
  284 (* ENDOTHERWISE *);
  285 (* OTHERWISEIF *);
  286 (* ENDOTHERWISEIF *);
  287 (* FOR *);
  288 (* ENDFOR *);
  289 (* REPEAT *);
  290 (* ENDREPEAT *);
  291 (* SET *);
  292 (* CONTINUE *);
  293 (* PASS *);
  294 (* TO *);
  295 (* WHILE *);
  296 (* INT *);
  297 (* BOOL *);
  298 (* STR *);
  299 (* FLOAT *);
  300 (* CHAR *);
  301 (* VOID *);
  302 (* RECT *);
  303 (* CIRC *);
  304 (* TRI *);
  305 (* SQRE *);
  306 (* ELPS *);
  307 (* POLY *);
  308 (* POINT *);
  309 (* LINE *);
  310 (* DATE *);
  311 (* COLOR *);
  312 (* LBRACKET *);
  313 (* RBRACKET *);
  314 (* COLON *);
  315 (* DOT *);
  316 (* END *);
  317 (* LENGTH *);
  318 (* APPEND *);
  319 (* REMOVE *);
  320 (* CREATEHEADER *);
  321 (* CREATEPARAGRAPH *);
  322 (* CREATETABLE *);
  323 (* CREATEUNORDEREDLIST *);
  324 (* OBJECT *);
    0 (* EOF *);
    0|]

let yytransl_block = [|
  325 (* ID *);
  326 (* LITERAL *);
  327 (* INT_LITERAL *);
  328 (* STRING_LITERAL *);
  329 (* BOOL_LITERAL *);
  330 (* FLOAT_LITERAL *);
    0|]

let yylhs = "\255\255\
\001\000\002\000\002\000\002\000\004\000\006\000\006\000\009\000\
\009\000\007\000\007\000\003\000\010\000\010\000\012\000\012\000\
\012\000\012\000\012\000\012\000\012\000\008\000\008\000\014\000\
\014\000\016\000\016\000\016\000\015\000\015\000\017\000\013\000\
\013\000\013\000\013\000\013\000\013\000\013\000\013\000\013\000\
\013\000\013\000\013\000\013\000\013\000\013\000\018\000\018\000\
\018\000\018\000\018\000\019\000\019\000\019\000\019\000\019\000\
\019\000\019\000\019\000\019\000\020\000\020\000\020\000\024\000\
\024\000\024\000\021\000\021\000\021\000\022\000\022\000\022\000\
\022\000\023\000\023\000\011\000\025\000\025\000\027\000\027\000\
\026\000\026\000\009\000\009\000\005\000\005\000\005\000\005\000\
\005\000\028\000\028\000\028\000\028\000\000\000"

let yylen = "\002\000\
\002\000\000\000\002\000\002\000\009\000\000\000\001\000\002\000\
\004\000\000\000\002\000\003\000\000\000\002\000\002\000\007\000\
\006\000\010\000\003\000\002\000\003\000\000\000\002\000\000\000\
\002\000\001\000\002\000\002\000\000\000\002\000\005\000\001\000\
\001\000\001\000\001\000\001\000\001\000\003\000\001\000\001\000\
\001\000\002\000\004\000\003\000\003\000\004\000\002\000\003\000\
\003\000\003\000\003\000\002\000\003\000\003\000\003\000\003\000\
\003\000\003\000\003\000\003\000\000\000\001\000\003\000\000\000\
\003\000\005\000\006\000\006\000\005\000\006\000\006\000\006\000\
\006\000\003\000\005\000\008\000\000\000\001\000\001\000\003\000\
\000\000\001\000\002\000\004\000\001\000\001\000\001\000\001\000\
\001\000\001\000\001\000\001\000\001\000\002\000"

let yydefred = "\000\000\
\002\000\000\000\094\000\000\000\085\000\086\000\087\000\088\000\
\089\000\001\000\003\000\004\000\000\000\000\000\012\000\000\000\
\000\000\000\000\000\000\008\000\000\000\000\000\010\000\000\000\
\000\000\009\000\011\000\000\000\000\000\000\000\000\000\000\000\
\005\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\032\000\034\000\033\000\000\000\023\000\000\000\
\036\000\037\000\039\000\040\000\041\000\000\000\000\000\000\000\
\000\000\000\000\000\000\020\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\042\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\015\000\044\000\000\000\045\000\000\000\019\000\021\000\
\022\000\000\000\000\000\000\000\038\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\046\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\029\000\024\000\000\000\
\069\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\067\000\068\000\070\000\071\000\072\000\
\073\000\000\000\000\000\030\000\016\000\000\000\000\000\026\000\
\025\000\022\000\000\000\028\000\027\000\000\000\022\000\018\000\
\000\000\031\000"

let yydgoto = "\002\000\
\003\000\004\000\011\000\012\000\046\000\018\000\025\000\029\000\
\019\000\000\000\000\000\047\000\048\000\147\000\146\000\161\000\
\156\000\049\000\050\000\066\000\051\000\052\000\053\000\056\000\
\095\000\000\000\096\000\000\000"

let yysindex = "\003\000\
\000\000\000\000\000\000\001\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\197\254\019\255\000\000\036\255\
\202\254\057\255\058\255\000\000\079\255\036\255\000\000\038\255\
\036\255\000\000\000\000\043\255\210\255\115\255\206\000\206\000\
\000\000\206\000\206\000\206\000\162\000\206\000\052\255\055\255\
\206\000\120\255\000\000\000\000\000\000\062\255\000\000\203\002\
\000\000\000\000\000\000\000\000\000\000\045\002\250\002\053\255\
\064\255\074\255\217\002\000\000\235\002\008\003\116\255\130\255\
\072\003\025\255\206\000\000\000\206\000\206\000\206\000\206\000\
\206\000\206\000\206\000\206\000\206\000\206\000\206\000\206\000\
\115\000\000\000\000\000\206\000\000\000\206\000\000\000\000\000\
\000\000\206\000\206\000\206\000\000\000\072\003\147\255\146\255\
\064\255\064\255\074\255\074\255\125\002\125\002\061\255\061\255\
\061\255\061\255\028\002\086\003\153\255\154\255\155\255\156\255\
\162\255\163\255\165\255\159\255\072\003\026\003\012\000\040\003\
\072\003\072\003\000\000\206\000\169\255\206\000\206\000\206\000\
\206\000\206\000\206\000\206\000\206\000\000\000\000\000\072\003\
\000\000\065\002\091\002\111\002\137\002\157\002\183\002\072\003\
\072\003\065\255\157\255\000\000\000\000\000\000\000\000\000\000\
\000\000\117\255\206\000\000\000\000\000\119\255\124\255\000\000\
\000\000\000\000\054\003\000\000\000\000\065\000\000\000\000\000\
\118\000\000\000"

let yyrindex = "\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\173\255\
\000\000\000\000\184\255\000\000\000\000\000\000\000\000\000\000\
\235\000\000\000\000\000\000\000\000\000\000\000\000\000\105\255\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\029\255\008\255\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\127\001\051\001\000\000\000\000\000\000\000\000\000\000\000\000\
\033\255\000\000\187\255\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\050\255\000\000\188\255\
\154\001\174\001\080\001\107\001\148\255\056\000\201\001\221\001\
\248\001\012\002\204\255\031\255\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\022\001\109\255\000\000\000\000\000\000\
\027\255\048\255\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\090\255\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\180\255\
\113\255\104\255\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000"

let yygindex = "\000\000\
\000\000\000\000\170\000\000\000\121\000\000\000\000\000\167\255\
\000\000\000\000\000\000\049\000\227\255\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000"

let yytablesize = 1169
let yytable = "\119\000\
\010\000\054\000\055\000\001\000\057\000\058\000\059\000\061\000\
\062\000\014\000\035\000\065\000\035\000\035\000\020\000\035\000\
\035\000\035\000\035\000\015\000\016\000\035\000\035\000\035\000\
\035\000\035\000\035\000\035\000\035\000\043\000\092\000\043\000\
\043\000\060\000\061\000\060\000\060\000\094\000\062\000\097\000\
\098\000\099\000\100\000\101\000\102\000\103\000\104\000\105\000\
\106\000\107\000\108\000\060\000\079\000\063\000\117\000\079\000\
\118\000\085\000\086\000\021\000\120\000\121\000\122\000\022\000\
\035\000\035\000\035\000\035\000\069\000\070\000\071\000\072\000\
\166\000\071\000\072\000\005\000\006\000\169\000\007\000\008\000\
\009\000\093\000\023\000\043\000\043\000\061\000\043\000\060\000\
\060\000\062\000\060\000\154\000\080\000\155\000\136\000\080\000\
\138\000\139\000\140\000\141\000\142\000\143\000\144\000\145\000\
\063\000\017\000\026\000\017\000\017\000\064\000\064\000\030\000\
\017\000\065\000\065\000\015\000\017\000\066\000\066\000\081\000\
\063\000\067\000\081\000\064\000\013\000\163\000\017\000\017\000\
\017\000\017\000\068\000\017\000\081\000\017\000\017\000\017\000\
\017\000\090\000\017\000\017\000\017\000\091\000\024\000\017\000\
\017\000\028\000\017\000\017\000\017\000\123\000\053\000\124\000\
\053\000\053\000\125\000\126\000\127\000\128\000\031\000\017\000\
\032\000\053\000\053\000\129\000\130\000\034\000\131\000\053\000\
\053\000\035\000\132\000\137\000\017\000\017\000\162\000\006\000\
\017\000\017\000\164\000\036\000\037\000\038\000\075\000\165\000\
\075\000\075\000\007\000\039\000\157\000\077\000\078\000\040\000\
\158\000\159\000\027\000\160\000\005\000\006\000\000\000\007\000\
\008\000\009\000\000\000\000\000\053\000\053\000\059\000\053\000\
\059\000\059\000\000\000\031\000\041\000\032\000\033\000\000\000\
\000\000\000\000\034\000\000\000\000\000\000\000\035\000\059\000\
\059\000\042\000\043\000\000\000\000\000\044\000\045\000\000\000\
\036\000\037\000\038\000\000\000\075\000\075\000\000\000\075\000\
\039\000\000\000\000\000\000\000\040\000\000\000\000\000\000\000\
\000\000\005\000\006\000\000\000\007\000\008\000\009\000\000\000\
\000\000\000\000\000\000\000\000\059\000\059\000\000\000\059\000\
\000\000\041\000\000\000\000\000\000\000\031\000\000\000\032\000\
\000\000\000\000\000\000\000\000\034\000\000\000\042\000\043\000\
\035\000\000\000\044\000\045\000\000\000\000\000\000\000\000\000\
\000\000\000\000\036\000\037\000\038\000\134\000\000\000\000\000\
\005\000\006\000\039\000\007\000\008\000\009\000\040\000\000\000\
\000\000\000\000\000\000\005\000\006\000\000\000\007\000\008\000\
\009\000\000\000\054\000\000\000\054\000\054\000\000\000\000\000\
\000\000\000\000\031\000\041\000\032\000\054\000\054\000\000\000\
\000\000\034\000\000\000\054\000\054\000\035\000\000\000\000\000\
\042\000\043\000\000\000\000\000\044\000\045\000\000\000\036\000\
\037\000\038\000\000\000\000\000\168\000\000\000\000\000\039\000\
\000\000\000\000\000\000\040\000\000\000\000\000\000\000\000\000\
\005\000\006\000\000\000\007\000\008\000\009\000\000\000\000\000\
\054\000\054\000\000\000\054\000\000\000\000\000\000\000\031\000\
\041\000\032\000\000\000\000\000\000\000\000\000\034\000\000\000\
\000\000\000\000\035\000\000\000\000\000\042\000\043\000\000\000\
\000\000\044\000\045\000\000\000\036\000\037\000\038\000\000\000\
\000\000\000\000\000\000\170\000\039\000\000\000\000\000\000\000\
\040\000\000\000\000\000\000\000\000\000\005\000\006\000\000\000\
\007\000\008\000\009\000\031\000\000\000\032\000\000\000\000\000\
\000\000\000\000\034\000\000\000\000\000\041\000\035\000\109\000\
\110\000\111\000\112\000\113\000\114\000\115\000\000\000\116\000\
\000\000\000\000\042\000\043\000\000\000\000\000\044\000\045\000\
\000\000\000\000\000\000\000\000\040\000\000\000\000\000\000\000\
\000\000\005\000\006\000\000\000\007\000\008\000\009\000\031\000\
\000\000\032\000\000\000\000\000\000\000\000\000\034\000\000\000\
\000\000\041\000\035\000\000\000\000\000\060\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\042\000\043\000\
\000\000\000\000\044\000\045\000\022\000\000\000\022\000\022\000\
\040\000\000\000\000\000\022\000\000\000\005\000\006\000\022\000\
\007\000\008\000\009\000\000\000\000\000\000\000\000\000\000\000\
\000\000\022\000\022\000\022\000\000\000\041\000\000\000\000\000\
\000\000\022\000\000\000\000\000\000\000\022\000\000\000\000\000\
\000\000\000\000\042\000\043\000\000\000\000\000\044\000\045\000\
\074\000\000\000\074\000\074\000\000\000\074\000\074\000\074\000\
\074\000\000\000\022\000\074\000\074\000\074\000\074\000\074\000\
\074\000\074\000\074\000\000\000\000\000\000\000\000\000\022\000\
\022\000\000\000\000\000\022\000\022\000\052\000\000\000\052\000\
\052\000\000\000\052\000\052\000\052\000\052\000\000\000\000\000\
\052\000\052\000\052\000\052\000\052\000\052\000\052\000\052\000\
\000\000\000\000\000\000\000\000\000\000\000\000\074\000\074\000\
\074\000\074\000\050\000\000\000\050\000\050\000\000\000\050\000\
\050\000\050\000\050\000\000\000\000\000\050\000\050\000\050\000\
\050\000\050\000\050\000\050\000\050\000\000\000\000\000\000\000\
\000\000\000\000\000\000\052\000\052\000\051\000\052\000\051\000\
\051\000\000\000\051\000\051\000\051\000\051\000\000\000\000\000\
\051\000\051\000\051\000\051\000\051\000\051\000\051\000\051\000\
\000\000\047\000\000\000\047\000\047\000\000\000\047\000\047\000\
\050\000\050\000\000\000\050\000\047\000\047\000\047\000\047\000\
\047\000\047\000\047\000\047\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\048\000\000\000\048\000\048\000\
\000\000\048\000\048\000\051\000\051\000\000\000\051\000\048\000\
\048\000\048\000\048\000\048\000\048\000\048\000\048\000\000\000\
\049\000\000\000\049\000\049\000\000\000\049\000\049\000\047\000\
\047\000\000\000\047\000\049\000\049\000\049\000\049\000\049\000\
\049\000\049\000\049\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\055\000\000\000\055\000\055\000\000\000\
\000\000\000\000\048\000\048\000\000\000\048\000\055\000\055\000\
\055\000\055\000\055\000\055\000\055\000\055\000\000\000\056\000\
\000\000\056\000\056\000\000\000\000\000\000\000\049\000\049\000\
\000\000\049\000\056\000\056\000\056\000\056\000\056\000\056\000\
\056\000\056\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\057\000\000\000\057\000\057\000\000\000\000\000\
\000\000\055\000\055\000\000\000\055\000\057\000\057\000\057\000\
\057\000\057\000\057\000\057\000\057\000\000\000\058\000\000\000\
\058\000\058\000\000\000\000\000\000\000\056\000\056\000\000\000\
\056\000\058\000\058\000\058\000\058\000\058\000\058\000\058\000\
\058\000\000\000\000\000\069\000\070\000\071\000\072\000\000\000\
\000\000\073\000\074\000\075\000\076\000\077\000\078\000\083\000\
\057\000\057\000\000\000\057\000\069\000\070\000\071\000\072\000\
\000\000\000\000\073\000\074\000\075\000\076\000\077\000\078\000\
\079\000\080\000\000\000\148\000\058\000\058\000\000\000\058\000\
\069\000\070\000\071\000\072\000\000\000\000\000\073\000\074\000\
\075\000\076\000\077\000\078\000\079\000\080\000\081\000\000\000\
\000\000\000\000\000\000\000\000\000\000\149\000\000\000\000\000\
\000\000\000\000\069\000\070\000\071\000\072\000\000\000\081\000\
\073\000\074\000\075\000\076\000\077\000\078\000\079\000\080\000\
\000\000\150\000\000\000\000\000\000\000\000\000\069\000\070\000\
\071\000\072\000\000\000\081\000\073\000\074\000\075\000\076\000\
\077\000\078\000\079\000\080\000\069\000\070\000\071\000\072\000\
\000\000\000\000\000\000\151\000\075\000\076\000\077\000\078\000\
\069\000\070\000\071\000\072\000\000\000\081\000\073\000\074\000\
\075\000\076\000\077\000\078\000\079\000\080\000\000\000\152\000\
\000\000\000\000\000\000\000\000\069\000\070\000\071\000\072\000\
\000\000\081\000\073\000\074\000\075\000\076\000\077\000\078\000\
\079\000\080\000\000\000\000\000\000\000\000\000\000\000\081\000\
\000\000\153\000\000\000\000\000\000\000\000\000\069\000\070\000\
\071\000\072\000\000\000\081\000\073\000\074\000\075\000\076\000\
\077\000\078\000\079\000\080\000\000\000\000\000\000\000\000\000\
\000\000\000\000\069\000\070\000\071\000\072\000\000\000\081\000\
\073\000\074\000\075\000\076\000\077\000\078\000\079\000\080\000\
\069\000\070\000\071\000\072\000\000\000\000\000\073\000\074\000\
\075\000\076\000\077\000\078\000\079\000\080\000\000\000\000\000\
\000\000\081\000\069\000\070\000\071\000\072\000\000\000\000\000\
\073\000\074\000\075\000\076\000\077\000\078\000\079\000\080\000\
\000\000\069\000\070\000\071\000\072\000\081\000\082\000\073\000\
\074\000\075\000\076\000\077\000\078\000\079\000\080\000\069\000\
\070\000\071\000\072\000\081\000\087\000\073\000\074\000\075\000\
\076\000\077\000\078\000\079\000\080\000\000\000\000\000\000\000\
\000\000\069\000\070\000\071\000\072\000\081\000\088\000\073\000\
\074\000\075\000\076\000\077\000\078\000\079\000\080\000\069\000\
\070\000\071\000\072\000\084\000\081\000\073\000\074\000\075\000\
\076\000\077\000\078\000\079\000\080\000\069\000\070\000\071\000\
\072\000\089\000\081\000\073\000\074\000\075\000\076\000\077\000\
\078\000\079\000\080\000\000\000\000\000\000\000\000\000\069\000\
\070\000\071\000\072\000\133\000\081\000\073\000\074\000\075\000\
\076\000\077\000\078\000\079\000\080\000\069\000\070\000\071\000\
\072\000\135\000\081\000\073\000\074\000\075\000\076\000\077\000\
\078\000\079\000\000\000\000\000\000\000\000\000\000\000\167\000\
\081\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\081\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\081\000"

let yycheck = "\089\000\
\000\000\031\000\032\000\001\000\034\000\035\000\036\000\037\000\
\038\000\069\001\003\001\041\000\005\001\006\001\069\001\008\001\
\009\001\010\001\011\001\001\001\002\001\014\001\015\001\016\001\
\017\001\018\001\019\001\020\001\021\001\003\001\006\001\005\001\
\006\001\003\001\006\001\005\001\006\001\067\000\006\001\069\000\
\070\000\071\000\072\000\073\000\074\000\075\000\076\000\077\000\
\078\000\079\000\080\000\021\001\003\001\006\001\084\000\006\001\
\086\000\005\001\006\001\003\001\090\000\091\000\092\000\006\001\
\057\001\058\001\059\001\060\001\008\001\009\001\010\001\011\001\
\162\000\010\001\011\001\040\001\041\001\167\000\043\001\044\001\
\045\001\057\001\004\001\057\001\058\001\057\001\060\001\057\001\
\058\001\057\001\060\001\027\001\003\001\029\001\124\000\006\001\
\126\000\127\000\128\000\129\000\130\000\131\000\132\000\133\000\
\057\001\002\001\069\001\004\001\005\001\005\001\006\001\069\001\
\009\001\005\001\006\001\001\001\013\001\005\001\006\001\059\001\
\069\001\002\001\059\001\069\001\004\000\155\000\023\001\024\001\
\025\001\026\001\069\001\028\001\059\001\030\001\031\001\032\001\
\016\000\022\001\035\001\036\001\037\001\012\001\022\000\040\001\
\041\001\025\000\043\001\044\001\045\001\003\001\003\001\006\001\
\005\001\006\001\002\001\002\001\002\001\002\001\002\001\056\001\
\004\001\014\001\015\001\002\001\002\001\009\001\002\001\020\001\
\021\001\013\001\012\001\003\001\069\001\070\001\058\001\003\001\
\073\001\074\001\060\001\023\001\024\001\025\001\003\001\060\001\
\005\001\006\001\003\001\031\001\032\001\003\001\003\001\035\001\
\036\001\037\001\025\000\147\000\040\001\041\001\255\255\043\001\
\044\001\045\001\255\255\255\255\057\001\058\001\003\001\060\001\
\005\001\006\001\255\255\002\001\056\001\004\001\005\001\255\255\
\255\255\255\255\009\001\255\255\255\255\255\255\013\001\020\001\
\021\001\069\001\070\001\255\255\255\255\073\001\074\001\255\255\
\023\001\024\001\025\001\255\255\057\001\058\001\255\255\060\001\
\031\001\255\255\255\255\255\255\035\001\255\255\255\255\255\255\
\255\255\040\001\041\001\255\255\043\001\044\001\045\001\255\255\
\255\255\255\255\255\255\255\255\057\001\058\001\255\255\060\001\
\255\255\056\001\255\255\255\255\255\255\002\001\255\255\004\001\
\255\255\255\255\255\255\255\255\009\001\255\255\069\001\070\001\
\013\001\255\255\073\001\074\001\255\255\255\255\255\255\255\255\
\255\255\255\255\023\001\024\001\025\001\026\001\255\255\255\255\
\040\001\041\001\031\001\043\001\044\001\045\001\035\001\255\255\
\255\255\255\255\255\255\040\001\041\001\255\255\043\001\044\001\
\045\001\255\255\003\001\255\255\005\001\006\001\255\255\255\255\
\255\255\255\255\002\001\056\001\004\001\014\001\015\001\255\255\
\255\255\009\001\255\255\020\001\021\001\013\001\255\255\255\255\
\069\001\070\001\255\255\255\255\073\001\074\001\255\255\023\001\
\024\001\025\001\255\255\255\255\028\001\255\255\255\255\031\001\
\255\255\255\255\255\255\035\001\255\255\255\255\255\255\255\255\
\040\001\041\001\255\255\043\001\044\001\045\001\255\255\255\255\
\057\001\058\001\255\255\060\001\255\255\255\255\255\255\002\001\
\056\001\004\001\255\255\255\255\255\255\255\255\009\001\255\255\
\255\255\255\255\013\001\255\255\255\255\069\001\070\001\255\255\
\255\255\073\001\074\001\255\255\023\001\024\001\025\001\255\255\
\255\255\255\255\255\255\030\001\031\001\255\255\255\255\255\255\
\035\001\255\255\255\255\255\255\255\255\040\001\041\001\255\255\
\043\001\044\001\045\001\002\001\255\255\004\001\255\255\255\255\
\255\255\255\255\009\001\255\255\255\255\056\001\013\001\061\001\
\062\001\063\001\064\001\065\001\066\001\067\001\255\255\069\001\
\255\255\255\255\069\001\070\001\255\255\255\255\073\001\074\001\
\255\255\255\255\255\255\255\255\035\001\255\255\255\255\255\255\
\255\255\040\001\041\001\255\255\043\001\044\001\045\001\002\001\
\255\255\004\001\255\255\255\255\255\255\255\255\009\001\255\255\
\255\255\056\001\013\001\255\255\255\255\060\001\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\069\001\070\001\
\255\255\255\255\073\001\074\001\002\001\255\255\004\001\005\001\
\035\001\255\255\255\255\009\001\255\255\040\001\041\001\013\001\
\043\001\044\001\045\001\255\255\255\255\255\255\255\255\255\255\
\255\255\023\001\024\001\025\001\255\255\056\001\255\255\255\255\
\255\255\031\001\255\255\255\255\255\255\035\001\255\255\255\255\
\255\255\255\255\069\001\070\001\255\255\255\255\073\001\074\001\
\003\001\255\255\005\001\006\001\255\255\008\001\009\001\010\001\
\011\001\255\255\056\001\014\001\015\001\016\001\017\001\018\001\
\019\001\020\001\021\001\255\255\255\255\255\255\255\255\069\001\
\070\001\255\255\255\255\073\001\074\001\003\001\255\255\005\001\
\006\001\255\255\008\001\009\001\010\001\011\001\255\255\255\255\
\014\001\015\001\016\001\017\001\018\001\019\001\020\001\021\001\
\255\255\255\255\255\255\255\255\255\255\255\255\057\001\058\001\
\059\001\060\001\003\001\255\255\005\001\006\001\255\255\008\001\
\009\001\010\001\011\001\255\255\255\255\014\001\015\001\016\001\
\017\001\018\001\019\001\020\001\021\001\255\255\255\255\255\255\
\255\255\255\255\255\255\057\001\058\001\003\001\060\001\005\001\
\006\001\255\255\008\001\009\001\010\001\011\001\255\255\255\255\
\014\001\015\001\016\001\017\001\018\001\019\001\020\001\021\001\
\255\255\003\001\255\255\005\001\006\001\255\255\008\001\009\001\
\057\001\058\001\255\255\060\001\014\001\015\001\016\001\017\001\
\018\001\019\001\020\001\021\001\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\003\001\255\255\005\001\006\001\
\255\255\008\001\009\001\057\001\058\001\255\255\060\001\014\001\
\015\001\016\001\017\001\018\001\019\001\020\001\021\001\255\255\
\003\001\255\255\005\001\006\001\255\255\008\001\009\001\057\001\
\058\001\255\255\060\001\014\001\015\001\016\001\017\001\018\001\
\019\001\020\001\021\001\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\003\001\255\255\005\001\006\001\255\255\
\255\255\255\255\057\001\058\001\255\255\060\001\014\001\015\001\
\016\001\017\001\018\001\019\001\020\001\021\001\255\255\003\001\
\255\255\005\001\006\001\255\255\255\255\255\255\057\001\058\001\
\255\255\060\001\014\001\015\001\016\001\017\001\018\001\019\001\
\020\001\021\001\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\003\001\255\255\005\001\006\001\255\255\255\255\
\255\255\057\001\058\001\255\255\060\001\014\001\015\001\016\001\
\017\001\018\001\019\001\020\001\021\001\255\255\003\001\255\255\
\005\001\006\001\255\255\255\255\255\255\057\001\058\001\255\255\
\060\001\014\001\015\001\016\001\017\001\018\001\019\001\020\001\
\021\001\255\255\255\255\008\001\009\001\010\001\011\001\255\255\
\255\255\014\001\015\001\016\001\017\001\018\001\019\001\003\001\
\057\001\058\001\255\255\060\001\008\001\009\001\010\001\011\001\
\255\255\255\255\014\001\015\001\016\001\017\001\018\001\019\001\
\020\001\021\001\255\255\003\001\057\001\058\001\255\255\060\001\
\008\001\009\001\010\001\011\001\255\255\255\255\014\001\015\001\
\016\001\017\001\018\001\019\001\020\001\021\001\059\001\255\255\
\255\255\255\255\255\255\255\255\255\255\003\001\255\255\255\255\
\255\255\255\255\008\001\009\001\010\001\011\001\255\255\059\001\
\014\001\015\001\016\001\017\001\018\001\019\001\020\001\021\001\
\255\255\003\001\255\255\255\255\255\255\255\255\008\001\009\001\
\010\001\011\001\255\255\059\001\014\001\015\001\016\001\017\001\
\018\001\019\001\020\001\021\001\008\001\009\001\010\001\011\001\
\255\255\255\255\255\255\003\001\016\001\017\001\018\001\019\001\
\008\001\009\001\010\001\011\001\255\255\059\001\014\001\015\001\
\016\001\017\001\018\001\019\001\020\001\021\001\255\255\003\001\
\255\255\255\255\255\255\255\255\008\001\009\001\010\001\011\001\
\255\255\059\001\014\001\015\001\016\001\017\001\018\001\019\001\
\020\001\021\001\255\255\255\255\255\255\255\255\255\255\059\001\
\255\255\003\001\255\255\255\255\255\255\255\255\008\001\009\001\
\010\001\011\001\255\255\059\001\014\001\015\001\016\001\017\001\
\018\001\019\001\020\001\021\001\255\255\255\255\255\255\255\255\
\255\255\255\255\008\001\009\001\010\001\011\001\255\255\059\001\
\014\001\015\001\016\001\017\001\018\001\019\001\020\001\021\001\
\008\001\009\001\010\001\011\001\255\255\255\255\014\001\015\001\
\016\001\017\001\018\001\019\001\020\001\021\001\255\255\255\255\
\255\255\059\001\008\001\009\001\010\001\011\001\255\255\255\255\
\014\001\015\001\016\001\017\001\018\001\019\001\020\001\021\001\
\255\255\008\001\009\001\010\001\011\001\059\001\060\001\014\001\
\015\001\016\001\017\001\018\001\019\001\020\001\021\001\008\001\
\009\001\010\001\011\001\059\001\060\001\014\001\015\001\016\001\
\017\001\018\001\019\001\020\001\021\001\255\255\255\255\255\255\
\255\255\008\001\009\001\010\001\011\001\059\001\060\001\014\001\
\015\001\016\001\017\001\018\001\019\001\020\001\021\001\008\001\
\009\001\010\001\011\001\058\001\059\001\014\001\015\001\016\001\
\017\001\018\001\019\001\020\001\021\001\008\001\009\001\010\001\
\011\001\058\001\059\001\014\001\015\001\016\001\017\001\018\001\
\019\001\020\001\021\001\255\255\255\255\255\255\255\255\008\001\
\009\001\010\001\011\001\058\001\059\001\014\001\015\001\016\001\
\017\001\018\001\019\001\020\001\021\001\008\001\009\001\010\001\
\011\001\058\001\059\001\014\001\015\001\016\001\017\001\018\001\
\019\001\020\001\255\255\255\255\255\255\255\255\255\255\058\001\
\059\001\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\059\001\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\059\001"

let yynames_const = "\
  SEMI\000\
  LPAREN\000\
  RPAREN\000\
  LBRACE\000\
  RBRACE\000\
  COMMA\000\
  FUNCTION\000\
  PLUS\000\
  MINUS\000\
  TIMES\000\
  DIVIDE\000\
  ASSIGN\000\
  NOT\000\
  EQ\000\
  NEQ\000\
  LT\000\
  LEQ\000\
  GT\000\
  GEQ\000\
  AND\000\
  OR\000\
  IN\000\
  DISPLAY\000\
  OUTPUT\000\
  IF\000\
  ENDIF\000\
  OTHERWISE\000\
  ENDOTHERWISE\000\
  OTHERWISEIF\000\
  ENDOTHERWISEIF\000\
  FOR\000\
  ENDFOR\000\
  REPEAT\000\
  ENDREPEAT\000\
  SET\000\
  CONTINUE\000\
  PASS\000\
  TO\000\
  WHILE\000\
  INT\000\
  BOOL\000\
  STR\000\
  FLOAT\000\
  CHAR\000\
  VOID\000\
  RECT\000\
  CIRC\000\
  TRI\000\
  SQRE\000\
  ELPS\000\
  POLY\000\
  POINT\000\
  LINE\000\
  DATE\000\
  COLOR\000\
  LBRACKET\000\
  RBRACKET\000\
  COLON\000\
  DOT\000\
  END\000\
  LENGTH\000\
  APPEND\000\
  REMOVE\000\
  CREATEHEADER\000\
  CREATEPARAGRAPH\000\
  CREATETABLE\000\
  CREATEUNORDEREDLIST\000\
  OBJECT\000\
  EOF\000\
  "

let yynames_block = "\
  ID\000\
  LITERAL\000\
  INT_LITERAL\000\
  STRING_LITERAL\000\
  BOOL_LITERAL\000\
  FLOAT_LITERAL\000\
  "

let yyact = [|
  (fun _ -> failwith "parser")
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'decls) in
    Obj.repr(
# 42 "qwebparse.mly"
           ( _1 )
# 664 "qwebparse.ml"
               : Ast.program))
; (fun __caml_parser_env ->
    Obj.repr(
# 46 "qwebparse.mly"
                 ( ([], [])               )
# 670 "qwebparse.ml"
               : 'decls))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'decls) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'vdecl) in
    Obj.repr(
# 47 "qwebparse.mly"
               ( ((_2 :: fst _1), snd _1) )
# 678 "qwebparse.ml"
               : 'decls))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'decls) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'fdecl) in
    Obj.repr(
# 48 "qwebparse.mly"
               ( (fst _1, (_2 :: snd _1)) )
# 686 "qwebparse.ml"
               : 'decls))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 8 : 'typ) in
    let _2 = (Parsing.peek_val __caml_parser_env 7 : string) in
    let _4 = (Parsing.peek_val __caml_parser_env 5 : 'formals_opt) in
    let _7 = (Parsing.peek_val __caml_parser_env 2 : 'vdecl_list) in
    let _8 = (Parsing.peek_val __caml_parser_env 1 : 'stmt_list) in
    Obj.repr(
# 52 "qwebparse.mly"
     ( { typ = _1;
	 fname = _2;
	 formals = List.rev _4;
	 locals = List.rev _7;
	 body = List.rev _8 } )
# 701 "qwebparse.ml"
               : 'fdecl))
; (fun __caml_parser_env ->
    Obj.repr(
# 59 "qwebparse.mly"
                  ( [] )
# 707 "qwebparse.ml"
               : 'formals_opt))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'formal_list) in
    Obj.repr(
# 60 "qwebparse.mly"
                  ( _1 )
# 714 "qwebparse.ml"
               : 'formals_opt))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'typ) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 63 "qwebparse.mly"
                             ( [(_1,_2)]     )
# 722 "qwebparse.ml"
               : 'formal_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : 'formal_list) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'typ) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 64 "qwebparse.mly"
                             ( (_3,_4) :: _1 )
# 731 "qwebparse.ml"
               : 'formal_list))
; (fun __caml_parser_env ->
    Obj.repr(
# 67 "qwebparse.mly"
                     ( [] )
# 737 "qwebparse.ml"
               : 'vdecl_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'vdecl_list) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'vdecl) in
    Obj.repr(
# 68 "qwebparse.mly"
                     ( _2 :: _1 )
# 745 "qwebparse.ml"
               : 'vdecl_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'typ) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : string) in
    Obj.repr(
# 71 "qwebparse.mly"
               ( (_1, _2) )
# 753 "qwebparse.ml"
               : 'vdecl))
; (fun __caml_parser_env ->
    Obj.repr(
# 74 "qwebparse.mly"
               ( [] )
# 759 "qwebparse.ml"
               : 'func_decl_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'func_decl_list) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'func_decl) in
    Obj.repr(
# 75 "qwebparse.mly"
                            (_2 :: _1)
# 767 "qwebparse.ml"
               : 'func_decl_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'expr) in
    Obj.repr(
# 82 "qwebparse.mly"
            (Expr _1)
# 774 "qwebparse.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 5 : string) in
    let _4 = (Parsing.peek_val __caml_parser_env 3 : 'expr) in
    let _6 = (Parsing.peek_val __caml_parser_env 1 : 'loop_stmt_list) in
    Obj.repr(
# 84 "qwebparse.mly"
                                              (For(Id(_2), _4, Block(List.rev _6)))
# 783 "qwebparse.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 4 : 'expr) in
    let _4 = (Parsing.peek_val __caml_parser_env 2 : 'stmt_list) in
    let _6 = (Parsing.peek_val __caml_parser_env 0 : 'otherwiseif_list) in
    Obj.repr(
# 85 "qwebparse.mly"
                                                  (If(_2, Block(List.rev _4), Block([])))
# 792 "qwebparse.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 8 : 'expr) in
    let _4 = (Parsing.peek_val __caml_parser_env 6 : 'stmt_list) in
    let _6 = (Parsing.peek_val __caml_parser_env 4 : 'otherwiseif_list) in
    let _9 = (Parsing.peek_val __caml_parser_env 1 : 'stmt_list) in
    Obj.repr(
# 86 "qwebparse.mly"
                                                                                         (IF(_2, Block(List.rev _4), Block(List.rev _9)))
# 802 "qwebparse.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'expr) in
    Obj.repr(
# 87 "qwebparse.mly"
                    (Display(_2))
# 809 "qwebparse.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    Obj.repr(
# 89 "qwebparse.mly"
              (Output Noexpr)
# 815 "qwebparse.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'expr) in
    Obj.repr(
# 90 "qwebparse.mly"
                   (Output _2)
# 822 "qwebparse.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    Obj.repr(
# 93 "qwebparse.mly"
                 ( [] )
# 828 "qwebparse.ml"
               : 'stmt_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'stmt_list) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'stmt) in
    Obj.repr(
# 94 "qwebparse.mly"
                  (_2 :: _1)
# 836 "qwebparse.ml"
               : 'stmt_list))
; (fun __caml_parser_env ->
    Obj.repr(
# 97 "qwebparse.mly"
                 ( [] )
# 842 "qwebparse.ml"
               : 'loop_stmt_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'loop_stmt_list) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'loop_stmt) in
    Obj.repr(
# 98 "qwebparse.mly"
                            (_2 :: _1)
# 850 "qwebparse.ml"
               : 'loop_stmt_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'stmt) in
    Obj.repr(
# 101 "qwebparse.mly"
        ( _1 )
# 857 "qwebparse.ml"
               : 'loop_stmt))
; (fun __caml_parser_env ->
    Obj.repr(
# 102 "qwebparse.mly"
            ( Pass )
# 863 "qwebparse.ml"
               : 'loop_stmt))
; (fun __caml_parser_env ->
    Obj.repr(
# 103 "qwebparse.mly"
                ( Continue )
# 869 "qwebparse.ml"
               : 'loop_stmt))
; (fun __caml_parser_env ->
    Obj.repr(
# 106 "qwebparse.mly"
                 ( [] )
# 875 "qwebparse.ml"
               : 'otherwiseif_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'otherwiseif_list) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'otherwiseif_stmt) in
    Obj.repr(
# 107 "qwebparse.mly"
                                     (_2 :: _1)
# 883 "qwebparse.ml"
               : 'otherwiseif_list))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 3 : 'expr) in
    let _4 = (Parsing.peek_val __caml_parser_env 1 : 'stmt_list) in
    Obj.repr(
# 110 "qwebparse.mly"
                                                   (If(_2, Block(List.rev _4), Block([])))
# 891 "qwebparse.ml"
               : 'otherwiseif_stmt))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : int) in
    Obj.repr(
# 113 "qwebparse.mly"
           (_1)
# 898 "qwebparse.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : float) in
    Obj.repr(
# 114 "qwebparse.mly"
                       ( Fliteral(_1) )
# 905 "qwebparse.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : bool) in
    Obj.repr(
# 115 "qwebparse.mly"
                       ( BoolLit(_1)  )
# 912 "qwebparse.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 116 "qwebparse.mly"
               ( Id(_1) )
# 919 "qwebparse.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'arith_op) in
    Obj.repr(
# 117 "qwebparse.mly"
            (_1)
# 926 "qwebparse.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'bool_op) in
    Obj.repr(
# 118 "qwebparse.mly"
           (_1)
# 933 "qwebparse.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'pseudo_list) in
    Obj.repr(
# 119 "qwebparse.mly"
                                 (ListDecl(List.rev _2))
# 940 "qwebparse.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'list_op) in
    Obj.repr(
# 120 "qwebparse.mly"
           (_1)
# 947 "qwebparse.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'html_op) in
    Obj.repr(
# 121 "qwebparse.mly"
           (_1)
# 954 "qwebparse.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'obj_op) in
    Obj.repr(
# 122 "qwebparse.mly"
          (_1)
# 961 "qwebparse.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'typ) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 123 "qwebparse.mly"
          (Id(_1))
# 969 "qwebparse.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 2 : string) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 124 "qwebparse.mly"
                      (Assign(_2, _4))
# 977 "qwebparse.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'expr) in
    Obj.repr(
# 125 "qwebparse.mly"
                      (_2)
# 984 "qwebparse.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'dict) in
    Obj.repr(
# 126 "qwebparse.mly"
                      (DictDecl(List.rev _2))
# 991 "qwebparse.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'actuals_opt) in
    Obj.repr(
# 127 "qwebparse.mly"
                                (Call(_1, _3))
# 999 "qwebparse.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 130 "qwebparse.mly"
               (Unop(Neg, _2))
# 1006 "qwebparse.ml"
               : 'arith_op))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 131 "qwebparse.mly"
                  (Binop(_1, Add, _3))
# 1014 "qwebparse.ml"
               : 'arith_op))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 132 "qwebparse.mly"
                   (Binop(_1, Minus, _3))
# 1022 "qwebparse.ml"
               : 'arith_op))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 133 "qwebparse.mly"
                   (Binop(_1, Times, _3))
# 1030 "qwebparse.ml"
               : 'arith_op))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 134 "qwebparse.mly"
                    (Binop(_1, Divide, _3))
# 1038 "qwebparse.ml"
               : 'arith_op))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 137 "qwebparse.mly"
             (Unop(Not, _2))
# 1045 "qwebparse.ml"
               : 'bool_op))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 138 "qwebparse.mly"
                 (Binop(_1, Eq, _3))
# 1053 "qwebparse.ml"
               : 'bool_op))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 139 "qwebparse.mly"
                 (Binop(_1, Neq, _3))
# 1061 "qwebparse.ml"
               : 'bool_op))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 140 "qwebparse.mly"
                 (Binop(_1, Less, _3))
# 1069 "qwebparse.ml"
               : 'bool_op))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 141 "qwebparse.mly"
                 (Binop(_1, Leq, _3))
# 1077 "qwebparse.ml"
               : 'bool_op))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 142 "qwebparse.mly"
                 (Binop(_1, Greater, _3))
# 1085 "qwebparse.ml"
               : 'bool_op))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 143 "qwebparse.mly"
                 (Binop(_1, Geq, _3))
# 1093 "qwebparse.ml"
               : 'bool_op))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 144 "qwebparse.mly"
                 (Binop(_1, And, _3))
# 1101 "qwebparse.ml"
               : 'bool_op))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 145 "qwebparse.mly"
                (Binop(_1, Or, _3))
# 1109 "qwebparse.ml"
               : 'bool_op))
; (fun __caml_parser_env ->
    Obj.repr(
# 148 "qwebparse.mly"
                 ( [] )
# 1115 "qwebparse.ml"
               : 'pseudo_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 149 "qwebparse.mly"
        ( [_1] )
# 1122 "qwebparse.ml"
               : 'pseudo_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'pseudo_list) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 150 "qwebparse.mly"
                          ( _3 :: _1 )
# 1130 "qwebparse.ml"
               : 'pseudo_list))
; (fun __caml_parser_env ->
    Obj.repr(
# 153 "qwebparse.mly"
                 ( [] )
# 1136 "qwebparse.ml"
               : 'dict))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 154 "qwebparse.mly"
                   ( [(_1, _3)] )
# 1144 "qwebparse.ml"
               : 'dict))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 4 : 'dict) in
    let _3 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _5 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 155 "qwebparse.mly"
                              ( (_3, _5) :: _1 )
# 1153 "qwebparse.ml"
               : 'dict))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 5 : 'expr) in
    let _5 = (Parsing.peek_val __caml_parser_env 1 : 'expr) in
    Obj.repr(
# 158 "qwebparse.mly"
                                      ( ListAppend(_1, _5) )
# 1161 "qwebparse.ml"
               : 'list_op))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 5 : 'expr) in
    let _5 = (Parsing.peek_val __caml_parser_env 1 : 'expr) in
    Obj.repr(
# 159 "qwebparse.mly"
                                      ( ListRemove(_1, _5) )
# 1169 "qwebparse.ml"
               : 'list_op))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 4 : 'expr) in
    Obj.repr(
# 160 "qwebparse.mly"
                                 ( ListLength(_1) )
# 1176 "qwebparse.ml"
               : 'list_op))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 5 : 'expr) in
    let _5 = (Parsing.peek_val __caml_parser_env 1 : 'expr) in
    Obj.repr(
# 163 "qwebparse.mly"
                                            ( HtmlHeader(_1, _5) )
# 1184 "qwebparse.ml"
               : 'html_op))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 5 : 'expr) in
    let _5 = (Parsing.peek_val __caml_parser_env 1 : 'expr) in
    Obj.repr(
# 164 "qwebparse.mly"
                                               ( HtmlParagraph(_1, _5) )
# 1192 "qwebparse.ml"
               : 'html_op))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 5 : 'expr) in
    let _5 = (Parsing.peek_val __caml_parser_env 1 : 'expr) in
    Obj.repr(
# 165 "qwebparse.mly"
                                           ( HtmlTable(_1, _5) )
# 1200 "qwebparse.ml"
               : 'html_op))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 5 : 'expr) in
    let _5 = (Parsing.peek_val __caml_parser_env 1 : 'expr) in
    Obj.repr(
# 166 "qwebparse.mly"
                                                   ( HtmlUnorderedList(_1, _5) )
# 1208 "qwebparse.ml"
               : 'html_op))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 169 "qwebparse.mly"
                  (ObjectField(_1, _3))
# 1216 "qwebparse.ml"
               : 'obj_op))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 4 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 2 : string) in
    let _5 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 170 "qwebparse.mly"
                              (ObjectAssign(_1, _3, _5))
# 1225 "qwebparse.ml"
               : 'obj_op))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 6 : string) in
    let _4 = (Parsing.peek_val __caml_parser_env 4 : 'formal_opt) in
    let _7 = (Parsing.peek_val __caml_parser_env 1 : 'stmt_list) in
    Obj.repr(
# 174 "qwebparse.mly"
    ( {
	  		fname = _2;
	  		formals = _4;
	  		body = List.rev _7
	  	} )
# 1238 "qwebparse.ml"
               : 'func_decl))
; (fun __caml_parser_env ->
    Obj.repr(
# 181 "qwebparse.mly"
                 ( [] )
# 1244 "qwebparse.ml"
               : 'actuals_opt))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'actuals_list) in
    Obj.repr(
# 182 "qwebparse.mly"
                ( List.rev _1 )
# 1251 "qwebparse.ml"
               : 'actuals_opt))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 185 "qwebparse.mly"
                              ( [_1] )
# 1258 "qwebparse.ml"
               : 'actuals_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'actuals_list) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 186 "qwebparse.mly"
                             ( _3 :: _1 )
# 1266 "qwebparse.ml"
               : 'actuals_list))
; (fun __caml_parser_env ->
    Obj.repr(
# 189 "qwebparse.mly"
                 ( [] )
# 1272 "qwebparse.ml"
               : 'formal_opt))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'formal_list) in
    Obj.repr(
# 190 "qwebparse.mly"
               ( List.rev _1 )
# 1279 "qwebparse.ml"
               : 'formal_opt))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'typ) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 193 "qwebparse.mly"
          ( [_1] )
# 1287 "qwebparse.ml"
               : 'formal_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : 'formal_list) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'typ) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 194 "qwebparse.mly"
                            (_3 :: _1)
# 1296 "qwebparse.ml"
               : 'formal_list))
; (fun __caml_parser_env ->
    Obj.repr(
# 197 "qwebparse.mly"
           ( Int   )
# 1302 "qwebparse.ml"
               : 'typ))
; (fun __caml_parser_env ->
    Obj.repr(
# 198 "qwebparse.mly"
           ( Bool  )
# 1308 "qwebparse.ml"
               : 'typ))
; (fun __caml_parser_env ->
    Obj.repr(
# 199 "qwebparse.mly"
           ( Float )
# 1314 "qwebparse.ml"
               : 'typ))
; (fun __caml_parser_env ->
    Obj.repr(
# 200 "qwebparse.mly"
           ( Char  )
# 1320 "qwebparse.ml"
               : 'typ))
; (fun __caml_parser_env ->
    Obj.repr(
# 201 "qwebparse.mly"
           ( Void  )
# 1326 "qwebparse.ml"
               : 'typ))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : float) in
    Obj.repr(
# 213 "qwebparse.mly"
                  (Int_lit(_1))
# 1333 "qwebparse.ml"
               : 'literal))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 214 "qwebparse.mly"
                    (String_lit(_1))
# 1340 "qwebparse.ml"
               : 'literal))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : bool) in
    Obj.repr(
# 215 "qwebparse.mly"
                  (Bool_lit(_1))
# 1347 "qwebparse.ml"
               : 'literal))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : float) in
    Obj.repr(
# 216 "qwebparse.mly"
                   (Float_lit(_1))
# 1354 "qwebparse.ml"
               : 'literal))
(* Entry program *)
; (fun __caml_parser_env -> raise (Parsing.YYexit (Parsing.peek_val __caml_parser_env 0)))
|]
let yytables =
  { Parsing.actions=yyact;
    Parsing.transl_const=yytransl_const;
    Parsing.transl_block=yytransl_block;
    Parsing.lhs=yylhs;
    Parsing.len=yylen;
    Parsing.defred=yydefred;
    Parsing.dgoto=yydgoto;
    Parsing.sindex=yysindex;
    Parsing.rindex=yyrindex;
    Parsing.gindex=yygindex;
    Parsing.tablesize=yytablesize;
    Parsing.table=yytable;
    Parsing.check=yycheck;
    Parsing.error_function=parse_error;
    Parsing.names_const=yynames_const;
    Parsing.names_block=yynames_block }
let program (lexfun : Lexing.lexbuf -> token) (lexbuf : Lexing.lexbuf) =
   (Parsing.yyparse yytables 1 lexfun lexbuf : Ast.program)
